// Simple PDF.js test to verify worker functionality
import * as pdfjsLib from 'pdfjs-dist';

export async function testPDFWorkerFunctionality(): Promise<boolean> {
  try {
    console.log('Testing PDF.js worker functionality...');
    
    // Check if worker is configured
    if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {
      console.error('No worker source configured');
      return false;
    }
    
    console.log('Worker source:', pdfjsLib.GlobalWorkerOptions.workerSrc);
    
    // Create a minimal PDF for testing
    const minimalPDF = new Uint8Array([
      0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, // %PDF-1.4\n
      0x25, 0xc4, 0xe5, 0xf2, 0xe5, 0xeb, 0xa7, 0xf3, 0xa0, 0xd0, 0xc4, 0xc6, 0x0a, // Binary comment
      0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, // 1 0 obj\n
      0x3c, 0x3c, 0x0a, // <<\n
      0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x0a, // /Type /Catalog\n
      0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0a, // /Pages 2 0 R\n
      0x3e, 0x3e, 0x0a, // >>\n
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, // endobj\n
      
      0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, // 2 0 obj\n
      0x3c, 0x3c, 0x0a, // <<\n
      0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x0a, // /Type /Pages\n
      0x2f, 0x4b, 0x69, 0x64, 0x73, 0x20, 0x5b, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x0a, // /Kids [3 0 R]\n
      0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x31, 0x0a, // /Count 1\n
      0x3e, 0x3e, 0x0a, // >>\n
      0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, // endobj\n
      
      0x78, 0x72, 0x65, 0x66, 0x0a, // xref\n
      0x30, 0x20, 0x33, 0x0a, // 0 3\n
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0a, // 0000000000 65535 f \n
      
      0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, // trailer\n
      0x3c, 0x3c, 0x0a, // <<\n
      0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x33, 0x0a, // /Size 3\n
      0x2f, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x0a, // /Root 1 0 R\n
      0x3e, 0x3e, 0x0a, // >>\n
      0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, // startxref\n
      0x31, 0x38, 0x33, 0x0a, // 183\n
      0x25, 0x25, 0x45, 0x4f, 0x46, 0x0a // %%EOF\n
    ]);
    
    // Try to load this minimal PDF
    const loadingTask = pdfjsLib.getDocument({
      data: minimalPDF,
      verbosity: 0,
    });
    
    try {
      const pdf = await loadingTask.promise;
      console.log('✅ PDF loaded successfully, pages:', pdf.numPages);
      return true;
    } catch (pdfError: any) {
      // Even if the PDF is malformed, if we get past the worker error, that's good
      if (pdfError.message && !pdfError.message.includes('GlobalWorkerOptions')) {
        console.log('✅ Worker is working (PDF parsing failed but that\'s expected for test data)');
        return true;
      }
      throw pdfError;
    }
    
  } catch (error: any) {
    console.error('❌ PDF.js worker test failed:', error.message);
    return false;
  }
}

// Auto-test when module loads (in development)
if (import.meta.env.DEV) {
  setTimeout(testPDFWorkerFunctionality, 1000);
}